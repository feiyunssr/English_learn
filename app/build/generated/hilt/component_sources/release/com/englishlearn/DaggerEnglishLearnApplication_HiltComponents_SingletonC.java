// Generated by Dagger (https://dagger.dev).
package com.englishlearn;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.englishlearn.data.api.DictionaryApi;
import com.englishlearn.data.api.GoogleAIApi;
import com.englishlearn.data.dao.DocumentDao;
import com.englishlearn.data.dao.LearningSessionDao;
import com.englishlearn.data.dao.VocabularyDao;
import com.englishlearn.data.database.EnglishLearnDatabase;
import com.englishlearn.data.dictionary.BuiltInDictionary;
import com.englishlearn.data.repository.DocumentRepositoryImpl;
import com.englishlearn.data.repository.VocabularyRepositoryImpl;
import com.englishlearn.di.DatabaseModule;
import com.englishlearn.di.DatabaseModule_ProvideDatabaseFactory;
import com.englishlearn.di.DatabaseModule_ProvideDocumentDaoFactory;
import com.englishlearn.di.DatabaseModule_ProvideLearningSessionDaoFactory;
import com.englishlearn.di.DatabaseModule_ProvideVocabularyDaoFactory;
import com.englishlearn.di.NetworkModule;
import com.englishlearn.di.NetworkModule_ProvideDictionaryApiFactory;
import com.englishlearn.di.NetworkModule_ProvideDictionaryRetrofitFactory;
import com.englishlearn.di.NetworkModule_ProvideGoogleAIApiFactory;
import com.englishlearn.di.NetworkModule_ProvideGoogleAIRetrofitFactory;
import com.englishlearn.di.NetworkModule_ProvideOkHttpClientFactory;
import com.englishlearn.domain.usecase.DictionaryUseCase;
import com.englishlearn.domain.usecase.DocumentImportUseCase;
import com.englishlearn.domain.usecase.TranslationUseCase;
import com.englishlearn.ui.MainActivity;
import com.englishlearn.ui.viewmodels.DocumentImportViewModel;
import com.englishlearn.ui.viewmodels.DocumentImportViewModel_HiltModules_KeyModule_ProvideFactory;
import com.englishlearn.ui.viewmodels.DocumentsViewModel;
import com.englishlearn.ui.viewmodels.DocumentsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.englishlearn.ui.viewmodels.HomeViewModel;
import com.englishlearn.ui.viewmodels.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.englishlearn.ui.viewmodels.ReadingViewModel;
import com.englishlearn.ui.viewmodels.ReadingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.englishlearn.ui.viewmodels.SettingsViewModel;
import com.englishlearn.ui.viewmodels.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.englishlearn.ui.viewmodels.VocabularyViewModel;
import com.englishlearn.ui.viewmodels.VocabularyViewModel_HiltModules_KeyModule_ProvideFactory;
import com.englishlearn.utils.DocumentProcessor;
import com.englishlearn.utils.FileUtils;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerEnglishLearnApplication_HiltComponents_SingletonC {
  private DaggerEnglishLearnApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public EnglishLearnApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements EnglishLearnApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements EnglishLearnApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements EnglishLearnApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements EnglishLearnApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements EnglishLearnApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements EnglishLearnApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements EnglishLearnApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public EnglishLearnApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends EnglishLearnApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends EnglishLearnApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends EnglishLearnApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends EnglishLearnApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(6).add(DocumentImportViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(DocumentsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ReadingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(VocabularyViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends EnglishLearnApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<DocumentImportViewModel> documentImportViewModelProvider;

    private Provider<DocumentsViewModel> documentsViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<ReadingViewModel> readingViewModelProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private Provider<VocabularyViewModel> vocabularyViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.documentImportViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.documentsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.readingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.settingsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.vocabularyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(6).put("com.englishlearn.ui.viewmodels.DocumentImportViewModel", ((Provider) documentImportViewModelProvider)).put("com.englishlearn.ui.viewmodels.DocumentsViewModel", ((Provider) documentsViewModelProvider)).put("com.englishlearn.ui.viewmodels.HomeViewModel", ((Provider) homeViewModelProvider)).put("com.englishlearn.ui.viewmodels.ReadingViewModel", ((Provider) readingViewModelProvider)).put("com.englishlearn.ui.viewmodels.SettingsViewModel", ((Provider) settingsViewModelProvider)).put("com.englishlearn.ui.viewmodels.VocabularyViewModel", ((Provider) vocabularyViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.englishlearn.ui.viewmodels.DocumentImportViewModel 
          return (T) new DocumentImportViewModel(singletonCImpl.documentImportUseCaseProvider.get());

          case 1: // com.englishlearn.ui.viewmodels.DocumentsViewModel 
          return (T) new DocumentsViewModel(singletonCImpl.documentRepositoryImplProvider.get());

          case 2: // com.englishlearn.ui.viewmodels.HomeViewModel 
          return (T) new HomeViewModel(singletonCImpl.documentRepositoryImplProvider.get(), singletonCImpl.vocabularyRepositoryImplProvider.get(), singletonCImpl.learningSessionDao());

          case 3: // com.englishlearn.ui.viewmodels.ReadingViewModel 
          return (T) new ReadingViewModel(singletonCImpl.documentRepositoryImplProvider.get(), singletonCImpl.vocabularyRepositoryImplProvider.get(), singletonCImpl.dictionaryUseCaseProvider.get(), singletonCImpl.translationUseCaseProvider.get(), singletonCImpl.documentProcessorProvider.get());

          case 4: // com.englishlearn.ui.viewmodels.SettingsViewModel 
          return (T) new SettingsViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 5: // com.englishlearn.ui.viewmodels.VocabularyViewModel 
          return (T) new VocabularyViewModel(singletonCImpl.vocabularyRepositoryImplProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends EnglishLearnApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends EnglishLearnApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends EnglishLearnApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<EnglishLearnDatabase> provideDatabaseProvider;

    private Provider<DocumentRepositoryImpl> documentRepositoryImplProvider;

    private Provider<DocumentProcessor> documentProcessorProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<FileUtils> fileUtilsProvider;

    private Provider<DocumentImportUseCase> documentImportUseCaseProvider;

    private Provider<VocabularyRepositoryImpl> vocabularyRepositoryImplProvider;

    private Provider<Retrofit> provideDictionaryRetrofitProvider;

    private Provider<DictionaryApi> provideDictionaryApiProvider;

    private Provider<BuiltInDictionary> builtInDictionaryProvider;

    private Provider<DictionaryUseCase> dictionaryUseCaseProvider;

    private Provider<Retrofit> provideGoogleAIRetrofitProvider;

    private Provider<GoogleAIApi> provideGoogleAIApiProvider;

    private Provider<TranslationUseCase> translationUseCaseProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private DocumentDao documentDao() {
      return DatabaseModule_ProvideDocumentDaoFactory.provideDocumentDao(provideDatabaseProvider.get());
    }

    private VocabularyDao vocabularyDao() {
      return DatabaseModule_ProvideVocabularyDaoFactory.provideVocabularyDao(provideDatabaseProvider.get());
    }

    private LearningSessionDao learningSessionDao() {
      return DatabaseModule_ProvideLearningSessionDaoFactory.provideLearningSessionDao(provideDatabaseProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<EnglishLearnDatabase>(singletonCImpl, 2));
      this.documentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<DocumentRepositoryImpl>(singletonCImpl, 1));
      this.documentProcessorProvider = DoubleCheck.provider(new SwitchingProvider<DocumentProcessor>(singletonCImpl, 3));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 5));
      this.fileUtilsProvider = DoubleCheck.provider(new SwitchingProvider<FileUtils>(singletonCImpl, 4));
      this.documentImportUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<DocumentImportUseCase>(singletonCImpl, 0));
      this.vocabularyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<VocabularyRepositoryImpl>(singletonCImpl, 6));
      this.provideDictionaryRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 9));
      this.provideDictionaryApiProvider = DoubleCheck.provider(new SwitchingProvider<DictionaryApi>(singletonCImpl, 8));
      this.builtInDictionaryProvider = DoubleCheck.provider(new SwitchingProvider<BuiltInDictionary>(singletonCImpl, 10));
      this.dictionaryUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<DictionaryUseCase>(singletonCImpl, 7));
      this.provideGoogleAIRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 13));
      this.provideGoogleAIApiProvider = DoubleCheck.provider(new SwitchingProvider<GoogleAIApi>(singletonCImpl, 12));
      this.translationUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<TranslationUseCase>(singletonCImpl, 11));
    }

    @Override
    public void injectEnglishLearnApplication(EnglishLearnApplication englishLearnApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.englishlearn.domain.usecase.DocumentImportUseCase 
          return (T) new DocumentImportUseCase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.documentRepositoryImplProvider.get(), singletonCImpl.documentProcessorProvider.get(), singletonCImpl.fileUtilsProvider.get());

          case 1: // com.englishlearn.data.repository.DocumentRepositoryImpl 
          return (T) new DocumentRepositoryImpl(singletonCImpl.documentDao());

          case 2: // com.englishlearn.data.database.EnglishLearnDatabase 
          return (T) DatabaseModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // com.englishlearn.utils.DocumentProcessor 
          return (T) new DocumentProcessor(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 4: // com.englishlearn.utils.FileUtils 
          return (T) new FileUtils(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideOkHttpClientProvider.get());

          case 5: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient();

          case 6: // com.englishlearn.data.repository.VocabularyRepositoryImpl 
          return (T) new VocabularyRepositoryImpl(singletonCImpl.vocabularyDao());

          case 7: // com.englishlearn.domain.usecase.DictionaryUseCase 
          return (T) new DictionaryUseCase(singletonCImpl.provideDictionaryApiProvider.get(), singletonCImpl.vocabularyRepositoryImplProvider.get(), singletonCImpl.builtInDictionaryProvider.get());

          case 8: // com.englishlearn.data.api.DictionaryApi 
          return (T) NetworkModule_ProvideDictionaryApiFactory.provideDictionaryApi(singletonCImpl.provideDictionaryRetrofitProvider.get());

          case 9: // @javax.inject.Named("dictionary") retrofit2.Retrofit 
          return (T) NetworkModule_ProvideDictionaryRetrofitFactory.provideDictionaryRetrofit(singletonCImpl.provideOkHttpClientProvider.get());

          case 10: // com.englishlearn.data.dictionary.BuiltInDictionary 
          return (T) new BuiltInDictionary();

          case 11: // com.englishlearn.domain.usecase.TranslationUseCase 
          return (T) new TranslationUseCase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideGoogleAIApiProvider.get(), singletonCImpl.vocabularyRepositoryImplProvider.get());

          case 12: // com.englishlearn.data.api.GoogleAIApi 
          return (T) NetworkModule_ProvideGoogleAIApiFactory.provideGoogleAIApi(singletonCImpl.provideGoogleAIRetrofitProvider.get());

          case 13: // @javax.inject.Named("googleai") retrofit2.Retrofit 
          return (T) NetworkModule_ProvideGoogleAIRetrofitFactory.provideGoogleAIRetrofit(singletonCImpl.provideOkHttpClientProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
