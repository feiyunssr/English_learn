// Generated by Dagger (https://dagger.dev).
package com.englishlearn.domain.usecase;

import com.englishlearn.data.api.DictionaryApi;
import com.englishlearn.data.dictionary.BuiltInDictionary;
import com.englishlearn.domain.repository.VocabularyRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DictionaryUseCase_Factory implements Factory<DictionaryUseCase> {
  private final Provider<DictionaryApi> dictionaryApiProvider;

  private final Provider<VocabularyRepository> vocabularyRepositoryProvider;

  private final Provider<BuiltInDictionary> builtInDictionaryProvider;

  public DictionaryUseCase_Factory(Provider<DictionaryApi> dictionaryApiProvider,
      Provider<VocabularyRepository> vocabularyRepositoryProvider,
      Provider<BuiltInDictionary> builtInDictionaryProvider) {
    this.dictionaryApiProvider = dictionaryApiProvider;
    this.vocabularyRepositoryProvider = vocabularyRepositoryProvider;
    this.builtInDictionaryProvider = builtInDictionaryProvider;
  }

  @Override
  public DictionaryUseCase get() {
    return newInstance(dictionaryApiProvider.get(), vocabularyRepositoryProvider.get(), builtInDictionaryProvider.get());
  }

  public static DictionaryUseCase_Factory create(Provider<DictionaryApi> dictionaryApiProvider,
      Provider<VocabularyRepository> vocabularyRepositoryProvider,
      Provider<BuiltInDictionary> builtInDictionaryProvider) {
    return new DictionaryUseCase_Factory(dictionaryApiProvider, vocabularyRepositoryProvider, builtInDictionaryProvider);
  }

  public static DictionaryUseCase newInstance(DictionaryApi dictionaryApi,
      VocabularyRepository vocabularyRepository, BuiltInDictionary builtInDictionary) {
    return new DictionaryUseCase(dictionaryApi, vocabularyRepository, builtInDictionary);
  }
}
