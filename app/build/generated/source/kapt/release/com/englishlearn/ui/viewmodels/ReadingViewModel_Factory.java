// Generated by Dagger (https://dagger.dev).
package com.englishlearn.ui.viewmodels;

import com.englishlearn.domain.repository.DocumentRepository;
import com.englishlearn.domain.repository.VocabularyRepository;
import com.englishlearn.domain.usecase.DictionaryUseCase;
import com.englishlearn.domain.usecase.TranslationUseCase;
import com.englishlearn.utils.DocumentProcessor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ReadingViewModel_Factory implements Factory<ReadingViewModel> {
  private final Provider<DocumentRepository> documentRepositoryProvider;

  private final Provider<VocabularyRepository> vocabularyRepositoryProvider;

  private final Provider<DictionaryUseCase> dictionaryUseCaseProvider;

  private final Provider<TranslationUseCase> translationUseCaseProvider;

  private final Provider<DocumentProcessor> documentProcessorProvider;

  public ReadingViewModel_Factory(Provider<DocumentRepository> documentRepositoryProvider,
      Provider<VocabularyRepository> vocabularyRepositoryProvider,
      Provider<DictionaryUseCase> dictionaryUseCaseProvider,
      Provider<TranslationUseCase> translationUseCaseProvider,
      Provider<DocumentProcessor> documentProcessorProvider) {
    this.documentRepositoryProvider = documentRepositoryProvider;
    this.vocabularyRepositoryProvider = vocabularyRepositoryProvider;
    this.dictionaryUseCaseProvider = dictionaryUseCaseProvider;
    this.translationUseCaseProvider = translationUseCaseProvider;
    this.documentProcessorProvider = documentProcessorProvider;
  }

  @Override
  public ReadingViewModel get() {
    return newInstance(documentRepositoryProvider.get(), vocabularyRepositoryProvider.get(), dictionaryUseCaseProvider.get(), translationUseCaseProvider.get(), documentProcessorProvider.get());
  }

  public static ReadingViewModel_Factory create(
      Provider<DocumentRepository> documentRepositoryProvider,
      Provider<VocabularyRepository> vocabularyRepositoryProvider,
      Provider<DictionaryUseCase> dictionaryUseCaseProvider,
      Provider<TranslationUseCase> translationUseCaseProvider,
      Provider<DocumentProcessor> documentProcessorProvider) {
    return new ReadingViewModel_Factory(documentRepositoryProvider, vocabularyRepositoryProvider, dictionaryUseCaseProvider, translationUseCaseProvider, documentProcessorProvider);
  }

  public static ReadingViewModel newInstance(DocumentRepository documentRepository,
      VocabularyRepository vocabularyRepository, DictionaryUseCase dictionaryUseCase,
      TranslationUseCase translationUseCase, DocumentProcessor documentProcessor) {
    return new ReadingViewModel(documentRepository, vocabularyRepository, dictionaryUseCase, translationUseCase, documentProcessor);
  }
}
