// Generated by Dagger (https://dagger.dev).
package com.englishlearn.domain.usecase;

import android.content.Context;
import com.englishlearn.domain.repository.DocumentRepository;
import com.englishlearn.utils.DocumentProcessor;
import com.englishlearn.utils.FileUtils;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DocumentImportUseCase_Factory implements Factory<DocumentImportUseCase> {
  private final Provider<Context> contextProvider;

  private final Provider<DocumentRepository> documentRepositoryProvider;

  private final Provider<DocumentProcessor> documentProcessorProvider;

  private final Provider<FileUtils> fileUtilsProvider;

  public DocumentImportUseCase_Factory(Provider<Context> contextProvider,
      Provider<DocumentRepository> documentRepositoryProvider,
      Provider<DocumentProcessor> documentProcessorProvider,
      Provider<FileUtils> fileUtilsProvider) {
    this.contextProvider = contextProvider;
    this.documentRepositoryProvider = documentRepositoryProvider;
    this.documentProcessorProvider = documentProcessorProvider;
    this.fileUtilsProvider = fileUtilsProvider;
  }

  @Override
  public DocumentImportUseCase get() {
    return newInstance(contextProvider.get(), documentRepositoryProvider.get(), documentProcessorProvider.get(), fileUtilsProvider.get());
  }

  public static DocumentImportUseCase_Factory create(Provider<Context> contextProvider,
      Provider<DocumentRepository> documentRepositoryProvider,
      Provider<DocumentProcessor> documentProcessorProvider,
      Provider<FileUtils> fileUtilsProvider) {
    return new DocumentImportUseCase_Factory(contextProvider, documentRepositoryProvider, documentProcessorProvider, fileUtilsProvider);
  }

  public static DocumentImportUseCase newInstance(Context context,
      DocumentRepository documentRepository, DocumentProcessor documentProcessor,
      FileUtils fileUtils) {
    return new DocumentImportUseCase(context, documentRepository, documentProcessor, fileUtils);
  }
}
